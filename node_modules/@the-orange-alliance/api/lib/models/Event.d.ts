import { ISerializable } from "./ISerializable";
import Match from "./Match";
import Ranking from "./Ranking";
import AwardRecipient from "./AwardRecipient";
import EventParticipant from "./EventParticipant";
import Alliance from "./Alliance";
import EventType from "./types/EventType";
export default class Event implements ISerializable {
    private _eventKey;
    private _seasonKey;
    private _regionKey;
    private _leagueKey;
    private _eventCode;
    private _eventTypeKey;
    private _eventRegionNumber;
    private _firstEventCode;
    private _divisionKey;
    private _divisionName;
    private _eventName;
    private _startDate;
    private _endDate;
    private _weekKey;
    private _city;
    private _stateProv;
    private _country;
    private _venue;
    private _website;
    private _timeZone;
    private _isActive;
    private _isPublic;
    private _activeTournamentLevel;
    private _allianceCount;
    private _fieldCount;
    private _advanceSpots;
    private _advanceEvent;
    private _teamCount;
    private _matchCount;
    private _matches;
    private _rankings;
    private _awards;
    private _teams;
    private _alliances;
    constructor();
    toJSON(): object;
    fromJSON(json: any): Event;
    get eventKey(): string;
    set eventKey(value: string);
    get seasonKey(): string;
    set seasonKey(value: string);
    get regionKey(): string;
    set regionKey(value: string);
    get leagueKey(): string;
    set leagueKey(value: string);
    get eventCode(): string;
    set eventCode(value: string);
    get eventTypeKey(): EventType;
    set eventTypeKey(value: EventType);
    get eventRegionNumber(): number;
    set eventRegionNumber(value: number);
    get firstEventCode(): string;
    set firstEventCode(value: string);
    get divisionKey(): number;
    set divisionKey(value: number);
    get divisionName(): string;
    set divisionName(value: string);
    get eventName(): string;
    set eventName(value: string);
    get startDate(): string;
    set startDate(value: string);
    get endDate(): string;
    set endDate(value: string);
    get weekKey(): string;
    set weekKey(value: string);
    get city(): string;
    set city(value: string);
    get stateProv(): string;
    set stateProv(value: string);
    get country(): string;
    set country(value: string);
    get venue(): string;
    set venue(value: string);
    get website(): string;
    set website(value: string);
    get timeZone(): string;
    set timeZone(value: string);
    get isActive(): boolean;
    set isActive(value: boolean);
    get isPublic(): boolean;
    set isPublic(value: boolean);
    get activeTournamentLevel(): string;
    set activeTournamentLevel(value: string);
    get allianceCount(): number;
    set allianceCount(value: number);
    get fieldCount(): number;
    set fieldCount(value: number);
    get advanceSpots(): number;
    set advanceSpots(value: number);
    get advanceEvent(): string;
    set advanceEvent(value: string);
    get teamCount(): number;
    set teamCount(value: number);
    get matchCount(): number;
    set matchCount(value: number);
    get matches(): Match[];
    set matches(value: Match[]);
    get rankings(): Ranking[];
    set rankings(value: Ranking[]);
    get awards(): AwardRecipient[];
    set awards(value: AwardRecipient[]);
    get teams(): EventParticipant[];
    set teams(value: EventParticipant[]);
    get alliances(): Alliance[];
    set alliances(value: Alliance[]);
    fixDate(date: any): any;
    getLocation(venue?: boolean): string;
    get fullEventName(): string;
}
