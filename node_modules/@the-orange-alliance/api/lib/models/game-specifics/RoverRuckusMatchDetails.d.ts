import { ISerializable } from '../ISerializable';
import MatchDetails from '../MatchDetails';
export default class RoverRuckusMatchDetails extends MatchDetails implements ISerializable {
    private _redAutoLand;
    private _redAutoSamp;
    private _redAutoClaim;
    private _redAutoPark;
    private _redDriverGold;
    private _redDriverSilver;
    private _redDriverDepot;
    private _redEndLatch;
    private _redEndIn;
    private _redEndComp;
    private _blueAutoLand;
    private _blueAutoSamp;
    private _blueAutoClaim;
    private _blueAutoPark;
    private _blueDriverGold;
    private _blueDriverSilver;
    private _blueDriverDepot;
    private _blueEndLatch;
    private _blueEndIn;
    private _blueEndComp;
    constructor();
    toJSON(): object;
    fromJSON(json: any): RoverRuckusMatchDetails;
    get redAutoLand(): number;
    set redAutoLand(value: number);
    get redAutoSamp(): number;
    set redAutoSamp(value: number);
    get redAutoClaim(): number;
    set redAutoClaim(value: number);
    get redAutoPark(): number;
    set redAutoPark(value: number);
    get redDriverGold(): number;
    set redDriverGold(value: number);
    get redDriverSilver(): number;
    set redDriverSilver(value: number);
    get redDriverDepot(): number;
    set redDriverDepot(value: number);
    get redEndLatch(): number;
    set redEndLatch(value: number);
    get redEndIn(): number;
    set redEndIn(value: number);
    get redEndComp(): number;
    set redEndComp(value: number);
    get blueAutoLand(): number;
    set blueAutoLand(value: number);
    get blueAutoSamp(): number;
    set blueAutoSamp(value: number);
    get blueAutoClaim(): number;
    set blueAutoClaim(value: number);
    get blueAutoPark(): number;
    set blueAutoPark(value: number);
    get blueDriverGold(): number;
    set blueDriverGold(value: number);
    get blueDriverSilver(): number;
    set blueDriverSilver(value: number);
    get blueDriverDepot(): number;
    set blueDriverDepot(value: number);
    get blueEndLatch(): number;
    set blueEndLatch(value: number);
    get blueEndIn(): number;
    set blueEndIn(value: number);
    get blueEndComp(): number;
    set blueEndComp(value: number);
}
