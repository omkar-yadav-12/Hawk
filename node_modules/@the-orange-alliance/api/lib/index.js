"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// import axios from "axios";
const node_fetch_1 = require("node-fetch");
const qs = require("qs");
const models_1 = require("./models");
const api_endpoint = "https://theorangealliance.org/api";
class API {
    constructor(api_key, application_name, proxy) {
        this._api_key = api_key;
        this._app_name = application_name;
        this._proxy = proxy;
    }
    headers() {
        return {
            "Content-Type": "application/json",
            "X-TOA-Key": this._api_key,
            "X-Application-Origin": this._app_name
        };
    }
    fetch(url, query) {
        return __awaiter(this, void 0, void 0, function* () {
            if (url.charAt(0) !== "/") {
                // If there is no leading slash, add one
                url = "/" + url;
            }
            let query_params = qs.stringify(query);
            if (query_params.length !== 0) {
                query_params = "?" + query_params;
            }
            let data = node_fetch_1.default(api_endpoint + url + query_params, {
                headers: this.headers()
            })
                .then(res => res.text())
                .catch(err => {
                throw new Error(err);
            });
            return yield data;
        });
    }
    jsonToObj(c, response_data) {
        let res = JSON.parse(response_data);
        let x = new c().fromJSON(res);
        return x;
    }
    arrToObj(c, response_data) {
        let res = JSON.parse(response_data);
        let x = res.map(value => new c().fromJSON(value));
        return x;
    }
    getAPI() {
        return __awaiter(this, void 0, void 0, function* () {
            let res = yield this.fetch("/");
            let version = JSON.parse(res);
            return version.version;
        });
    }
    getDocs() {
        return __awaiter(this, void 0, void 0, function* () {
            console.warn("This method isn't implemented in the API yet.");
            return "";
        });
    }
    getDocsGet() {
        return __awaiter(this, void 0, void 0, function* () {
            console.warn("This method isn't implemented in the API yet.");
            return "";
        });
    }
    getDocsPost() {
        return __awaiter(this, void 0, void 0, function* () {
            console.warn("This method isn't implemented in the API yet.");
            return "";
        });
    }
    getDocsPut() {
        return __awaiter(this, void 0, void 0, function* () {
            console.warn("This method isn't implemented in the API yet.");
            return "";
        });
    }
    getDocsModels() {
        return __awaiter(this, void 0, void 0, function* () {
            console.warn("This method isn't implemented in the API yet.");
            return "";
        });
    }
    getSeasons() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Season, yield this.fetch("/seasons"));
        });
    }
    getRegions() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Region, yield this.fetch("/regions"));
        });
    }
    getLeagues() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.League, yield this.fetch("/leagues"));
        });
    }
    getStreams() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.EventLiveStream, yield this.fetch("/streams"));
        });
    }
    // /api/event
    getEvents({ league_key, region_key, season_key, type } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Event, yield this.fetch("/event/", {
                league_key: league_key,
                region_key: region_key,
                season_key: season_key,
                type: type
            }));
        });
    }
    getEventCount() {
        return __awaiter(this, void 0, void 0, function* () {
            let x = yield this.fetch("/event/size");
            let y = JSON.parse(x);
            return y.result;
        });
    }
    getEvent(eventKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Event, yield this.fetch(`/event/${eventKey}`))[0];
        });
    }
    getEventMatches(eventKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Match, yield this.fetch(`/event/${eventKey}/matches`));
        });
    }
    getEventMatchDetails(eventKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.MatchDetails, yield this.fetch(`/event/${eventKey}/matches/details`));
        });
    }
    getEventMatchParticipants(eventKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.MatchParticipant, yield this.fetch(`/event/${eventKey}/matches/participants`));
        });
    }
    getEventRankings(eventKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Ranking, yield this.fetch(`/event/${eventKey}/rankings`));
        });
    }
    getEventInsights(eventKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Insights, yield this.fetch(`/event/${eventKey}/insights`));
        });
    }
    getEventAlliances(eventKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Alliance, yield this.fetch(`/event/${eventKey}/alliances`));
        });
    }
    getEventStreams(eventKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.EventLiveStream, yield this.fetch(`/event/${eventKey}/streams`));
        });
    }
    getEventTeams(eventKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.EventParticipant, yield this.fetch(`/event/${eventKey}/teams`));
        });
    }
    getEventAwards(eventKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.AwardRecipient, yield this.fetch(`/event/${eventKey}/awards`));
        });
    }
    getEventMedia(eventKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Media, yield this.fetch(`/event/${eventKey}/media`));
        });
    }
    // /api/match
    getSeasonMatches(seasonKey, start = 0, count = 500) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Match, yield this.fetch(`/match/all/${seasonKey}`, {
                start: start,
                count: count
            }));
        });
    }
    getSeasonMatchCount() {
        return __awaiter(this, void 0, void 0, function* () {
            let x = yield this.fetch("/match/size");
            let y = JSON.parse(x);
            return y.result;
        });
    }
    getHighScoreMatch(type) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Match, yield this.fetch("/match/high-scores", { type: type }))[0];
        });
    }
    getMatch(matchKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Match, yield this.fetch(`/match/${matchKey}`))[0];
        });
    }
    getMatchDetails(matchKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.MatchDetails, yield this.fetch(`/match/${matchKey}/details`))[0];
        });
    }
    getMatchParticipants(matchKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.MatchParticipant, yield this.fetch(`/match/${matchKey}/participants`));
        });
    }
    // /api/team
    getTeams() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Team, yield this.fetch(`/team`));
        });
    }
    getTeamCount() {
        return __awaiter(this, void 0, void 0, function* () {
            let x = yield this.fetch("/team/size");
            let y = JSON.parse(x);
            return y.result;
        });
    }
    getTeam(teamKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Team, yield this.fetch(`/team/${teamKey}`))[0];
        });
    }
    getTeamWLT(teamKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Team, yield this.fetch(`/team/${teamKey}/wlt`))[0];
        });
    }
    getTeamEvents(teamKey, seasonKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.EventParticipant, yield this.fetch(`/team/${teamKey}/events/${seasonKey}`));
        });
    }
    getTeamAwards(teamKey, seasonKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.AwardRecipient, yield this.fetch(`/team/${teamKey}/awards/${seasonKey}`));
        });
    }
    getTeamRankings(teamKey, seasonKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Ranking, yield this.fetch(`/team/${teamKey}/results/${seasonKey}`));
        });
    }
    getTeamMedia(teamKey, seasonKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Media, yield this.fetch(`/team/${teamKey}/media/${seasonKey}`));
        });
    }
    getSeasonTeams(seasonKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Team, yield this.fetch(`/team/history/${seasonKey}`));
        });
    }
    getSeasonTeam(teamKey, seasonKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.Team, yield this.fetch(`/team/history/${seasonKey}/${teamKey}`));
        });
    }
    // /api/web
    getWebAnnouncements() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.WebAnnouncement, yield this.fetch(`/web/announcements`));
        });
    }
    // /api/league
    getLeague(leagueKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.League, yield this.fetch(`/league/${leagueKey}`))[0];
        });
    }
    getLeagueDivisions() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.arrToObj(models_1.LeagueDiv, yield this.fetch(`/league/divisions`));
        });
    }
}
exports.API = API;
