import HTTPHeaders from "./util/HTTPHeaders";
import HttpsProxy from "./util/HttpsProxy";
import { Season, Region, League, EventLiveStream, Event, Match, MatchDetails, MatchParticipant, Ranking, Insights, Alliance, Media, AwardRecipient, EventParticipant, Team, WebAnnouncement, LeagueDiv } from "./models";
export declare class API {
    private _api_key;
    private _app_name;
    private _proxy;
    constructor(api_key: string, application_name: string, proxy?: HttpsProxy);
    headers(): HTTPHeaders;
    fetch(url: string, query?: any): Promise<string>;
    private jsonToObj;
    private arrToObj;
    getAPI(): Promise<string>;
    getDocs(): Promise<string>;
    getDocsGet(): Promise<string>;
    getDocsPost(): Promise<string>;
    getDocsPut(): Promise<string>;
    getDocsModels(): Promise<string>;
    getSeasons(): Promise<Season[]>;
    getRegions(): Promise<Region[]>;
    getLeagues(): Promise<League[]>;
    getStreams(): Promise<EventLiveStream[]>;
    getEvents({ league_key, region_key, season_key, type }?: {
        league_key?: string;
        region_key?: string;
        season_key?: string;
        type?: string;
    }): Promise<Event[]>;
    getEventCount(): Promise<number>;
    getEvent(eventKey: string): Promise<Event>;
    getEventMatches(eventKey: string): Promise<Match[]>;
    getEventMatchDetails(eventKey: string): Promise<MatchDetails[]>;
    getEventMatchParticipants(eventKey: string): Promise<MatchParticipant[]>;
    getEventRankings(eventKey: string): Promise<Ranking[]>;
    getEventInsights(eventKey: string): Promise<Insights[]>;
    getEventAlliances(eventKey: string): Promise<Alliance[]>;
    getEventStreams(eventKey: string): Promise<EventLiveStream[]>;
    getEventTeams(eventKey: string): Promise<EventParticipant[]>;
    getEventAwards(eventKey: string): Promise<AwardRecipient[]>;
    getEventMedia(eventKey: string): Promise<Media[]>;
    getSeasonMatches(seasonKey: string, start?: number, count?: number): Promise<Match[]>;
    getSeasonMatchCount(): Promise<number>;
    getHighScoreMatch(type: "quals" | "elims" | "all"): Promise<Match>;
    getMatch(matchKey: string): Promise<Match>;
    getMatchDetails(matchKey: string): Promise<MatchDetails>;
    getMatchParticipants(matchKey: string): Promise<MatchParticipant[]>;
    getTeams(): Promise<Team[]>;
    getTeamCount(): Promise<number>;
    getTeam(teamKey: string): Promise<Team>;
    getTeamWLT(teamKey: string): Promise<Team>;
    getTeamEvents(teamKey: string, seasonKey: string): Promise<EventParticipant[]>;
    getTeamAwards(teamKey: string, seasonKey: string): Promise<AwardRecipient[]>;
    getTeamRankings(teamKey: string, seasonKey: string): Promise<Ranking[]>;
    getTeamMedia(teamKey: string, seasonKey: string): Promise<Media[]>;
    getSeasonTeams(seasonKey: string): Promise<Team[]>;
    getSeasonTeam(teamKey: string, seasonKey: string): Promise<Team[]>;
    getWebAnnouncements(): Promise<WebAnnouncement[]>;
    getLeague(leagueKey: string): Promise<League>;
    getLeagueDivisions(): Promise<LeagueDiv[]>;
}
